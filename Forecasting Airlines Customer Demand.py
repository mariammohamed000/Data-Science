# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1in78MaM8FN-J24ajXzB8GnvGWQDpTCVf
"""

import pandas as pd
import numpy as np
from statsmodels.tsa.ar_model import AutoReg
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from dateutil.relativedelta import relativedelta
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('AirPassengers.csv')

# Convert the 'Month' column to datetime
df['Month'] = pd.to_datetime(df['Month'])

# Split the data into train and test sets
train_size = int(len(df) * 0.8)  # 80% for training
train, test = df[:train_size], df[train_size:]

# Generate forecasts for different patterns
# Level
model_level1 = SARIMAX(train['#Passengers'], order=(0, 0, 0), trend='c')
model_fit_level1 = model_level1.fit()
forecast_level1 = model_fit_level1.predict(start=test.index[0], end=test.index[-1])

# Trend
model_trend1 = SARIMAX(train['#Passengers'], order=(1, 0, 0), trend='t')
model_fit_trend1 = model_trend1.fit()
forecast_trend1 = model_fit_trend1.predict(start=test.index[0], end=test.index[-1])

# Seasonality
model_seasonality1 = SARIMAX(train['#Passengers'], order=(0, 0, 0), seasonal_order=(1, 1, 1, 12))
model_fit_seasonality1 = model_seasonality1.fit()
forecast_seasonality1 = model_fit_seasonality1.predict(start=test.index[0], end=test.index[-1])

# Plot the forecasts
plt.figure(figsize=(12, 6))
plt.plot(train['Month'], train['#Passengers'], label='Training Data')
plt.plot(test['Month'], test['#Passengers'], label='Test Data')
plt.plot(test['Month'], forecast_level1, label='Forecast (Level)')
plt.plot(test['Month'], forecast_trend1, label='Forecast (Trend)')
plt.plot(test['Month'], forecast_seasonality1, label='Forecast (Seasonality)')
plt.xlabel('Month')
plt.ylabel('Passengers')
plt.title('Forecasts with Different Patterns')
plt.legend()
plt.show()

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# Generate forecasts for different patterns
# Level
model_level2 = ARIMA(train['#Passengers'], order=(0, 0, 0))
model_fit_level2 = model_level2.fit()
forecast_level2 = model_fit_level2.predict(start=test.index[0], end=test.index[-1])

# Trend
model_trend2 = ARIMA(train['#Passengers'], order=(1, 0, 0))
model_fit_trend2 = model_trend2.fit()
forecast_trend2 = model_fit_trend2.predict(start=test.index[0], end=test.index[-1])

# Seasonality
model_seasonality2 = ARIMA(train['#Passengers'], order=(0, 0, 0), seasonal_order=(1, 1, 1, 12))
model_fit_seasonality2 = model_seasonality2.fit()
forecast_seasonality2 = model_fit_seasonality2.predict(start=test.index[0], end=test.index[-1])

# Plot the forecasts
plt.figure(figsize=(12, 6))
plt.plot(train['Month'], train['#Passengers'], label='Training Data')
plt.plot(test['Month'], test['#Passengers'], label='Test Data')
plt.plot(test['Month'], forecast_level2, label='Forecast (Level)')
plt.plot(test['Month'], forecast_trend2, label='Forecast (Trend)')
plt.plot(test['Month'], forecast_seasonality2, label='Forecast (Seasonality)')
plt.xlabel('Month')
plt.ylabel('Passengers')
plt.title('Forecasts with Different Patterns')
plt.legend()
plt.show()

import pandas as pd
from statsmodels.tsa.ar_model import AutoReg
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# Generate forecasts for different patterns
# Level
model_level3 = AutoReg(train['#Passengers'], lags=1)
model_fit_level3 = model_level.fit()
forecast_level3 = model_fit_level.predict(start=test.index[0], end=test.index[-1])

# Trend
model_trend3 = AutoReg(train['#Passengers'], lags=12)
model_fit_trend3 = model_trend3.fit()
forecast_trend3 = model_fit_trend3.predict(start=test.index[0], end=test.index[-1])

# Seasonality
model_seasonality3 = AutoReg(train['#Passengers'], lags=12)
model_fit_seasonality3 = model_seasonality3.fit()
forecast_seasonality3 = model_fit_seasonality3.predict(start=test.index[0], end=test.index[-1])

# Plot the forecasts
plt.figure(figsize=(12, 6))
plt.plot(train['Month'], train['#Passengers'], label='Training Data')
plt.plot(test['Month'], test['#Passengers'], label='Test Data')
plt.plot(test['Month'], forecast_level3, label='Forecast (Level)')
plt.plot(test['Month'], forecast_trend3, label='Forecast (Trend)')
plt.plot(test['Month'], forecast_seasonality3, label='Forecast (Seasonality)')
plt.xlabel('Month')
plt.ylabel('Passengers')
plt.title('Forecasts with Different Patterns')
plt.legend()
plt.show()

